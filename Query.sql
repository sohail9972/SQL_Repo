
-- CREATE DATABASE Test_DB;
-- DROP DATABASE test_d;

USE TEST_DB;

-- FOR THE CREATING THE TABLES  
CREATE TABLE STUDENTS(SNO INT(5),SNAME VARCHAR(15),MARKS INT(3));

-- GIVES THE OUTPUT OF SKELETON OF THE TABLE CREATED

DESCRIBE STUDENTS; 

-- INSERTING THE USERS INTO THE TABLES

INSERT INTO STUDENTS VALUES(1,'KIRAN',89); 

-- GIVES DATA OF THE TABLE

SELECT * FROM STUDENTS; 


CREATE DATABASE SAMPLES;

USE samples;

SELECT * FROM employees;

-- for sleecting the field name which has space the between them
 
SELECT `FIRST NAME` FROM employees;

SELECT `FIRST NAME` FNAME ,gender,Salary,Team FROM employees;


-- WHERE  - it is used for the Filtering the Records

USE SAMPLES;
SELECT * FROM employees;
SELECT * FROM EMPLOYEES WHERE SALARY>=130000;
SELECT * FROM EMPLOYEES WHERE SALARY=90000;
SELECT * FROM EMPLOYEES WHERE GENDER=MALE;
SELECT * FROM EMPLYEES WHERE TEAM=MARKETING;
SELECT distinct TEAM FROM EMPLOYEES;
SELECT distinct * FROM EMPLOYEES;

-- Using of the Loical Operators

USE SAMPLES;
SELECT * FROM employees;
SELECT GENDER FROM EMPLOYEES;
SELECT * FROM EMPLOYEES WHERE SALARY>=90000 AND GENDER='MALE';
SELECT * FROM EMPLOYEES WHERE SALARY>=80000 OR SALARY<=90000;
SELECT * FROM EMPLOYEES WHERE SALARY>=60000 AND TEAM='FINANCE';
SELECT * FROM EMPLOYEES WHERE NOT TEAM='FINANCE'; 


-- USING THE BETWEEN ,NOT BETWEEEN ,IN NOT IN OPERATORS
-- BETWEEN OPERATORS USED FOR THE GETTING values FROM TABLE IN THE GIVEN FOLLOWING RANGE 

SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 89000 AND 90000; 
SELECT * FROM EMPLOYEES WHERE SALARY NOT BETWEEN 60000 AND 90000;

-- IN OPERATOR WILL RETURN THE ROWS WHEN THE VALUES ARE MATCHING IN THE LIST
 
 SELECT * FROM EMPLOYEES WHERE SALARY IN (95000,50000,54043);
SELECT * FROM EMPLOYEES WHERE SALARY NOT IN (85000,50000,20000);

-- PATTERN MATCHING OPERATORS 
-- % - MANY CHARCTER
-- _ - SINGLE CHARCTER

-- WILL RETURN THE 'FIRST NAME' WHICH STARTS WITH THE 'S' CHARACTER 
SELECT * FROM EMPLOYEES WHERE `FIRST NAME` LIKE 'S%';    
SELECT * FROM EMPLOYEES WHERE `TEAM` LIKE 'E%';

-- RETURN THE FIRST NAME OR THE VALUES FROM THE COLUMN THAT END WITH MENTIONED CHARACTERS
SELECT * FROM EMPLOYEES WHERE `FIRST NAME` LIKE '%Y';
SELECT * FROM EMPLOYEES WHERE `TEAM` LIKE '%E'; 

-- RETURNS THE VALUES THAT START WITH 'S' AND END WITH 'Y' CHARACTERS
SELECT * FROM EMPLOYEES WHERE `FIRST NAME` LIKE 'S%Y';
SELECT * FROM EMPLOYEES WHERE `TEAM` LIKE 'S%E'; 

-- RETURN VALUES WHICH CONTAINS THE THIS CHARCTER EITHER AT BEGNING OR LAST OR IN THE MIDDLE
SELECT * FROM EMPLOYEES WHERE `FIRST NAME` LIKE '%M%';
SELECT * FROM EMPLOYEES WHERE `TEAM` LIKE '%N%';

-- RETURNS VALUE WHICH ENDS WITH Y AND ONE MORE CHARACTERS AT THE END
SELECT * FROM EMPLOYEES WHERE `FIRST NAME` LIKE '%Y_';
SELECT * FROM EMPLOYEES WHERE `TEAM` LIKE '%E_'; 

-- RETURNS THE VALUES WHOES LENGTH EQUALS TO THE UNIQUE DASHES
SELECT * FROM EMPLOYEES WHERE `FIRST NAME` LIKE '___';
SELECT * FROM EMPLOYEES WHERE `TEAM` LIKE '_____'; 


-- 	ALTER COMMAND IS USED FOR THE MAKING CHNAGES IN THE COLUMN
USE TEST_DB;
ALTER TABLE STUDENTS ADD (GRADE VARCHAR(2));
DESCRIBE STUDENTS;

-- ALTER COMMAND CAN ALSO BE USED FOR THE DROPPING THE COLUMN FROM THE TABLE
ALTER TABLE STUDENTS DROP COLUMN GRADE;


-- ALTER COMMAND CAN BE USED FOR THE MODIFYING THE DATA TYPE AND CHARCTER LIMITS
ALTER TABLE STUDENTS MODIFY COLUMN SNAME VARCHAR(25);
DESCRIBE STUDENTS;


-- ALTER COMMAND CAN BE USED FOR THE RENAME OF THE COLUMN NAME
ALTER TABLE STUDENTS RENAME COLUMN SNAME TO SFULLNAME;
DESCRIBE STUDENTS; 


 DROP DATABASE test_d;
 
 -- DELETE THE DATA FROM THE TABLE
 USE TEST_DB;
 SET autocommit = 0;
 SET SQL_SAFE_UPDATES = 0;
 SELECT * FROM STUDENTS;
 DELETE FROM STUDENTS;
 ROLLBACK;
 
 
 INSERT INTO STUDENTS VALUES(101,'SMITH',56);
 INSERT INTO STUDENTS VALUES(102,'KITHA',65);
 INSERT INTO STUDENTS VALUES(103,'MITHA',85);
 SELECT * FROM STUDENTS;
 COMMIT;
 DESCRIBE STUDENTS;
 
 
 -- RENAMING THE TABLE NAMES 
 RENAME TABLE STUDENTS TO ALLSTUDENTS;
 RENAME TABLE ALLSTUDENTS TO STUDENTS;
 
 
 SELECT UPPER('sohail');
 
 -- BUILT IN FUNCTIONS OF SQL
 USE SAMPLES;
 -- UPPER() FUNCTION TO CONVERT THE CHARACTER TO UPPPER CASE LETTER 
 SELECT UPPER(`FIRST NAME`) FROM employees;
 
-- LOWER() FUNCTION TO CONVERT THE CHARACTER TO LOWER CASE LETTER
  SELECT LOWER(`FIRST NAME`) FROM employees;
  
-- LENGTH() PROVIDES THE LENGTH OF THE STRINGS
 SELECT LENGTH('WECOME');
 SELECT LENGTH(`FIRST NAME`) FROM employees;
 
 -- RETURNS ALL THE FIRST NAME COLUMN WHOSE LENGTH IS OF 4 
 SELECT * FROM EMPLOYEES WHERE LENGTH(`FIRST NAME`)=4;
 
 -- TRIM() EMOVES SPECIFIED CHARCTER FROM STRINGS
 SELECT TRIM('   ORCALE    ');
 SELECT TRIM('A' FROM 'AAPPLEA');
 
 -- NSTR() RETURNT HE POSITION OF THE CHARCTER FROM THE STRING
 
 SELECT INSTR('WELCOME','O');
 SELECT INSTR('WELCOME','A');
 
 
 -- SUBSTR()/SUBSTRING() RETUNR THE SUBSSTRING OF TYHE STRING
 SELECT SUBSTR('ORCALE',2,3);
 SELECT SUBSTRING('ORCALE',2,3);
 
 SELECT SUBSTRING(`FIRST NAME`,1,3) FROM EMPLOYEES;
 
 
 -- CONCAT() TO JOIN THE TWO STRINGS
 SELECT CONCAT('HELLO','WORLD');
 
 SELECT CONCAT(`FIRST NAME`,`TEAM`) NEWFEILD FROM EMPLOYEES;
 
 
 -- https://dev.mysql.com/doc/refman/8.4/en/string-functions.html 
 --  use this link to refer the mysql functions()
 
 
 -- NUMERIC FUNCTIONS
 SELECT ABS(-40);
 SELECT SQRT(45);
 SELECT MOD(10,3);
 SELECT POWER(2,5);
 SELECT TRUNCATE(40.1245694,3);
 SELECT TRUNCATE(40.2546469884,-1);
 SELECT TRUNCATE(45646442,-3);
 
 
 -- GREATEST() LEAST() 
 
 SELECT GREATEST(10,120,425,655,102);
 SELECT LEAST(10,5,48,6,45);
 
 
 -- DATE FUNCTIONS 
-- CURDATE()/CURRENT_DATE() WILL RETURN THE CURRENT DATE 
 SELECT CURDATE();
 SELECT CURRENT_DATE();
 
 -- CURTIME()/CURRENT_TIME() - RETURN THE CURRENT TIME
 SELECT CURTIME();
 SELECT CURRENT_TIME();
 
 -- BOTH DATE AND TIME 
 SELECT NOW();
 
 -- SYSDATE() WILL RETUNR THE SYSTEM DATE AND TIME
 SELECT SYSDATE();
 
 -- RETURN THE MONTH
 SELECT MONTH("2024-09-13");
 
 -- RETUNR THE YEAR
 SELECT YEAR("2024-09-13");
 
 -- RETURN THE DAY
 SELECT DAY("2024-09-13");
 
 SELECT * FROM  EMPLOYEES;
 SELECT * FROM EMPLOYEES WHERE YEAR(`START DATE`)="1993";
 
 SELECT * FROM EMPLOYEES WHERE MONTH(`START DATE`)="6";
 SELECT * FROM EMPLOYEES WHERE MONTHNAME(`START DATE`)="JUNE";
 
 
 
 -- AGGREGATE FUNCTION IS USED TO PERFORM THE CALCULAUTIO OF THE MULTIPLE ROWS IN PARICULAR COULMN
 SELECT AVG(SALARY) FROM EMPLOYEES;
 SELECT SUM(SALARY) FROM EMPLOYEES;
 SELECT MIN(SALARY) FROM EMPLOYEES;
 SELECT MAX(SALARY) FROM EMPLOYEES;
 SELECT COUNT(SALARY) FROM EMPLOYEES;
 
 -- GIVES THE TOTAL COUNT OF ROWS 
 SELECT COUNT(*) FROM EMPLOYEES;
 
 
 
 -- GROUP BY CLAUSE
 -- RECORDS INTO THE SUMMARY ROWS 
 -- RECORDS FOR EACH GROUP
 --  IT INVOLVES THE AGGREGATE FUNCTIONS
-- CAN BE GROUPERD BY ONE OR MORE COLUMNS 
SELECT GENDER,SUM(SALARY) FROM EMPLOYEES GROUP BY GENDER;
SELECT GENDER,AVG(SALARY) FROM EMPLOYEES GROUP BY GENDER;
SELECT GENDER,MAX(SALARY),MIN(SALARY) FROM EMPLOYEES GROUP BY GENDER;
SELECT GENDER,COUNT(*) FROM EMPLOYEES GROUP BY GENDER;
SELECT TEAM,COUNT(*) FROM EMPLOYEES GROUP BY TEAM;

SELECT GENDER `FIRST NAME`,SUM(SALARY) FROM EMPLOYEES GROUP BY GENDER;


-- HAVING CLAUSE
 SELECT GENDER,SUM(SALARY) FROM EMPLOYEES GROUP BY GENDER HAVING SUM(SALARY)>80000;
 
 SELECT GENDER ,SUM(SALARY) FROM EMPLOYEES WHERE SALARY<>90000 GROUP BY GENDER;
 
 
 -- SORTING IN ASCENDING OR DESCENDING ORDER
 SELECT * FROM EMPLOYEES ORDER BY SALARY;
 SELECT * FROM EMPLOYEES ORDER BY SALARY DESC;
 
 -- PERFORMING SELECT ---->FROM---->GROUP BY ----> HAVING ---->ORDER BY
 
 SELECT TEAM,SUM(SALARY) FROM EMPLOYEES GROUP BY TEAM HAVING SUM(SALARY)>90000 ORDER BY SUM(SALARY);
 
 
 USE SAMPLES;
 SELECT * FROM TAB2;
 SELECT * FROM PEOPLE;
 
 
 -- INNER JOIN
 SELECT * FROM TAB2 INNER JOIN PEOPLE
 ON TAB2.`CUSTOMER ID`= PEOPLE.`CUSTOMER ID`;
 
 
-- RIGHT JOIN  
  SELECT * FROM TAB2 RIGHT JOIN PEOPLE
 ON TAB2.`CUSTOMER ID`= PEOPLE.`CUSTOMER ID`;
 
 
-- LEFT JOIN 
  SELECT * FROM TAB2 LEFT JOIN PEOPLE
 ON TAB2.`CUSTOMER ID`= PEOPLE.`CUSTOMER ID`;
 
 
-- FULL JOIN - NOT SUPPORTED IN THE MYSQL 
  SELECT * FROM TAB2 INNER JOIN PEOPLE
 ON TAB2.`CUSTOMER ID`= PEOPLE.`CUSTOMER ID`;
 
 
 
 -- EXAMPLES
 SELECT * FROM TAB2 INNER JOIN PEOPLE
 ON TAB2.CITY<>PEOPLE.CITY;
 
 
 SELECT PEOPLE.PHONE FROM TAB2 INNER JOIN PEOPLE
 ON TAB2.`PHONE 1`<>PEOPLE.PHONE;
 
 
 -- LEFT JOIN 
  SELECT PEOPLE.PHONE FROM TAB2 LEFT JOIN PEOPLE
 ON TAB2.`PHONE 1`<>PEOPLE.PHONE;
 
 -- SELF JOIN
 
 SELECT E.PHONE,M.`PHONE 1`,E.`FIRST NAME`,M.`FIRST NAME` FROM 
 PEOPLE E, TAB2 M WHERE `PHONE 1`=PHONE;
 
 ALTER TABLE EMPLOYEETAB2 RENAME COLUMN `EMPLOYEE ID` TO EMPLOYEEE_ID;
 ALTER TABLE EMPLOYEETAB2 RENAME COLUMN `EMPLOYEE ID` TO EMPLOYEEE_ID;
 
  ALTER TABLE PEOPLE RENAME COLUMN `USER ID` TO PEOPLE_ID;
	ALTER TABLE TAB2 RENAME COLUMN `CUSTOMER ID` TO CUSTOMER_ID;


-- SUB QUERY
SELECT * FROM EMPLOYEES;
SELECT SALARY FROM EMPLOYEES WHERE `FIRST NAME`='LARRY'; 
SELECT SALARY FROM EMPLOYEES WHERE SALARY < (SELECT SALARY FROM EMPLOYEES WHERE `FIRST NAME`='THOMAS');


SELECT MAX(SALARY) FROM EMPLOYEES;
-- 2ND MAXIMUM SALARY 
SELECT MAX(SALARY) FROM EMPLOYEES WHERE SALARY< (SELECT MAX(SALARY) FROM EMPLOYEES);


-- 3RD MAXIMUM SALARY
SELECT MAX(SALARY) FROM EMPLOYEES WHERE SALARY< 
(SELECT MAX(SALARY) FROM EMPLOYEES WHERE SALARY <
(SELECT MAX(SALARY) FROM EMPLOYEES));


-- FINDING THE SALARY OF EMPLOYEE WHOSE SALARY IS GREATER THAN THE SALARY OF EMPLOYEE WHOS
-- EMP_ID IS 150;


SELECT SALARY FROM EMPLOYEES WHERE SALARY>(SELECT SALARY FROM EMPLOYEES WHERE TEAM='FINANCE'); 



-- DISPLAY THE LIST OF THE eMPLOYEES WHO ALL ARE EARNING THE HIGHEST SALARY
SELECT * FROM EMPLOYEES WHERE SALARY =(SELECT MAX(SALARY) FROM EMPLOYEES);  


-- MULTI ROW SUB QUERY
SELECT SALARY FROM EMPLOYEES WHERE SALARY IN (SELECT SALARY FROM EMPLOYEES WHERE TEAM='FINANCE');  

-- > ANY 
SELECT SALARY FROM EMPLOYEES WHERE SALARY>ANY(SELECT SALARY FROM EMPLOYEES WHERE TEAM='FINANCE'); 

 --  < ALL
SELECT SALARY FROM EMPLOYEES WHERE SALARY<ALL(SELECT SALARY FROM EMPLOYEES WHERE TEAM='FINANCE'); 

SELECT FIRST_NAME,EMPLOYEES_ID,DEPARTMENT_ID,
(SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE EMPLOYEES.DEPARTMENT_ID=DEPARTMENTS.DEPARTMENT_ID) DNAME
FROM EMPOYEES;




-- BIG PROBLEM
SELECT EMP_ID,F_NAME,SALARY,H_DATE FROM EMPLOYEES WHERE SALARY <
 (SELECT MAX(SALARY) FROM EMPLOYEES) AND H_DATE>
 (SELECT H_DATE FROM EMPLOYEES WHERE SALARY=
 (SELECT MAX(SALARY) FROM EMPLOYEES)); 
